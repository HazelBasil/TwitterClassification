Here is just a series of commands to intiaite the testing using Scikit-learn.  This will be cleaned up.  


>>> import RandomForestAccountClassification as r
Backend MacOSX is interactive backend. Turning interactive mode on.
>>> a = r.FTAC()
>>> a.study('/Users/Hunter/Desktop/kwon/updated_data/BMB_training.txt')
>>> print(a.train['Description'][0])
>>> import pandas as pd
>>> test = a.collect('/Users/Hunter/Desktop/kwon/updated_data/BMB_testing.txt')
>>> print(test.shape)
(200, 3)
>>> clean_test_reviews = []
>>> clean_test_descriptions = []
>>> num_descriptions = len(test["Description"])
>>> for i in xrange(0,num_descriptions):
...     if((i+1) % 1000 ==  0 ):
...         print("Review %d of %d\n" % (i+1, num_descriptions))
...     clean_description = a.clean(test['Description'][i])
...     clean_test_descriptions.append(clean_description)
...     
Traceback (most recent call last):
  File "<input>", line 1, in <module>
NameError: name 'xrange' is not defined
>>> for i in range(0,num_descriptions):
...     if((i+1) % 1000 ==  0 ):
...         print("Review %d of %d\n" % (i+1, num_descriptions))
...     clean_description = a.clean(test['Description'][i])
...     clean_test_descriptions.append(clean_description)
...     
>>> clean_test_descriptions
>>> test_data_features = a.v.transform(clean_test_descriptions)
>>> test_data_features
<200x3408 sparse matrix of type '<class 'numpy.int64'>'
	with 959 stored elements in Compressed Sparse Row format>
>>> test_data_features = test_data_features.toarray()
>>> test_data_features
>>> result = a.f.predict(test_data_features)
>>> output = pd.DataFrame(data={"id": test["UserID"],
                           "Description": test["Description"],
                           "Personal": result})
>>> output.to_csv('BMB_test_output.txt', index = False, quoting = 3)
>>> output.to_csv('BMB_test_output.csv', index = False, quoting = 3)
